import cv2
import numpy as np
import matplotlib.pyplot as plt

def enhance_image(image):
# Perform image enhancement (e.g., contrast enhancement, noise reduction)
# Example: Histogram equalization for contrast enhancement
enhanced_image = cv2.equalizeHist(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY))
return enhanced_image

def detect_cracks(enhanced_image):
# Perform crack detection using Canny edge detection
# You may need to adjust the parameters based on your image
edges = cv2.Canny(enhanced_image, threshold1=30, threshold2=100)
return edges

def create_mask(crack_edges):
# Create a binary mask from the detected edges
mask = np.zeros_like(crack_edges)
mask[crack_edges > 0] = 255
return mask

def separate_intensity(crack_mask):
# Separate high-intensity and low-intensity cracks (optional)
# You may need to adjust the threshold based on your image
_, binary_mask = cv2.threshold(crack_mask, 127, 255, cv2.THRESH_BINARY)
low_intensity_crack_mask = np.where(binary_mask == 255, 0, 255).astype(np.uint8)
high_intensity_crack_mask = np.where(binary_mask == 255, 255, 0).astype(np.uint8)
return high_intensity_crack_mask, low_intensity_crack_mask

# Load the image
image = cv2.imread('bridge_image.jpg')

# Image enhancement
enhanced_image = enhance_image(image)

# Crack detection
crack_edges = detect_cracks(enhanced_image)

# Create masks
crack_mask = create_mask(crack_edges)

# Intensity-based separation (optional)
high_intensity_crack_mask, low_intensity_crack_mask = separate_intensity(crack_mask)

# Plotting
plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

plt.subplot(2, 2, 2)
plt.imshow(enhanced_image, cmap='gray')
plt.title('Enhanced Image')
plt.axis('off')

plt.subplot(2, 2, 3)
plt.imshow(crack_edges, cmap='gray')
plt.title('Detected Cracks')
plt.axis('off')

plt.subplot(2, 2, 4)
plt.imshow(crack_mask, cmap='gray')
plt.title('Crack Mask')
plt.axis('off')

plt.tight_layout()
plt.show()
